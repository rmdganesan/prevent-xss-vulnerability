<?php

/**
 * @package PreventXSSVulnerability\Frontend
 */

class Prevent_XSS_Vulnerability_Frontend {  

	/**
	 * Initialize WordPress init Hook
	 */
	public function init() {
		$this->prevent_xss_vulnerability();		
	}

	/**
	 * Encode the Page URI and match with Original URI. If both doesn't match so, it redirects user to the Encoded URI.
	 */
	private function prevent_xss_vulnerability() {
		$get_page_uri = $_SERVER['REQUEST_URI'];
		$xss_detection = $get_page_uri;

		$encode_params = array(
			' ',
			'!',
			'"',
			'% ',
			"'",
			'(',
			')',
			'*',
			'<',
			'>',
			'`',
			'^',
			'[',
			']',
			'{',
			'|',
			'}',
		);

		$encode_values = array(
			'%20', // Space Encoded Value
			'%21', // ! Encoded Value
			'%22', // " Encoded Value
			'%25', // % Encoded Value
			'%27', // ' Encoded Value
			'%28', // ( Encoded Value
			'%29', // ) Encoded Value
			'%2A', // * Encoded Value
			'%3C', // < Encoded Value
			'%3E', // > Encoded Value
			'%60', // ` Encoded Value
			'%5E', // ^ Encoded Value
			'%5B', // [ Encoded Value
			'%5D', // ] Encoded Value
			'%7B', // { Encoded Value
			'%7C', // | Encoded Value
			'%7D', // } Encoded Value
		);

		$xss_detection = str_replace($encode_params, $encode_values, $xss_detection);

		$remove_xss_params = array(
			'%3C',
			'%3E',
			'%28',
			'%29',
			'%5B',
			'%5D',
			'%7B',
			'%7C',
			'%7D',
		);

		$xss_detection = str_replace($remove_xss_params, '', $xss_detection);

		// If the Original Page URI and the URI after XSS Detection does not same so, redirect the user on the URI which doesn't contain XSS Paramters
		if ($get_page_uri != $xss_detection) {
			header('HTTP/1.0 301 Moved Permanently');
			header('Location: '.$xss_detection);
			exit();
		}
	}
}
