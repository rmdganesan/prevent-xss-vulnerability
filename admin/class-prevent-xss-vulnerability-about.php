<?php
/**
 * @package PreventXSSVulnerability\Admin\About
 */

class Prevent_XSS_Vulnerability_About {

  /**
   * Call Post Settings Function.
   */
  function __construct() {
    $this->more_plugins();
  }

  /**
   * More Plugins HTML.
   *
   * @access private
   * @since 0.1
   *
   * @return void
   */
  private function more_plugins() {
    $html  = '<div class="wrap">';
    $html .= '<h2>About Cross-site scripting</h2>';
    $html .= '<div>
                  <p>Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy.</p>

                  <p>Cross-site scripting carried out on websites accounted for roughly <strong>84%</strong> of all security vulnerabilities documented by Symantec as of <em>2007</em>. <strong>Bug bounty company HackerOne</strong> in <em>2017</em> reported that XSS is still a major threat vector. XSS effects vary in range from petty nuisance to significant security risk, depending on the sensitivity of the data handled by the vulnerable site and the nature of any security mitigation implemented by the site\'s owner.</p>
              </div>';

    $html .= '<h3 id="reflected-cross-site-scripting">Reflected Cross-site Scripting</h3>
              <div>
                  <p>The non-persistent (or reflected) cross-site scripting vulnerability is by far the most basic type of web vulnerability. These holes show up when the data provided by a web client, most commonly in HTTP query parameters (e.g. HTML form submission), is used immediately by server-side scripts to parse and display a page of results for and to that user, without properly sanitizing the request.</p>

                  <p>A reflected attack is typically delivered via email or a neutral web site. The bait is an innocent-looking URL, pointing to a trusted site but containing the XSS vector. If the trusted site is vulnerable to the vector, clicking the link can cause the victim\'s browser to execute the injected script.</p>
              </div>';

    $html .= '<h3 id="persistent-cross-site-scripting">Persistent Cross-site Scripting</h3>
              <div>
                  <p>The persistent (or stored) XSS vulnerability is a more devastating variant of a cross-site scripting flaw: it occurs when the data provided by the attacker is saved by the server, and then permanently displayed on "normal" pages returned to other users in the course of regular browsing, without proper HTML escaping. A classic example of this is with online message boards where users are allowed to post HTML formatted messages for other users to read.</p>
              </div>';

    $html .= '<h3 id="mutated-cross-site-scripting">Mutated Cross-site Scripting</h3>
              <div>
                  <p>Mutated XSS happens, when the attacker injects something that is seemingly safe, but rewritten and modified by the browser, while parsing the markup. This makes it extremely hard to detect or sanitize within the websites application logic. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters on parameters to CSS font-family.</p>
              </div>';
    $html .= '</div>';

    echo $html;
  }
}
