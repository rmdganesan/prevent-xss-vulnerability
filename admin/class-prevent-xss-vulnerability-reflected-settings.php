<?php
/**
 * @package PreventXSSVulnerability\Admin
 */

class Prevent_XSS_Vulnerability_Reflected_Settings {

  /**
   * Call Reflected Settings Function.
   */
  function __construct() {
    $this->xss_reflected_settings();
  }

  /**
   * Reflected Settings Page
   *
   * @access private
   * @since 0.1
   *
   * @return void
   */
  private function xss_reflected_settings() {
    if ( ! current_user_can( 'administrator' ) )  {
      wp_die( __( 'You do not have sufficient permissions to access this page.' ) );
    }
    if ( isset( $_POST['submit'] ) ) {
      $reflected_xss =  array(
        'exclude_encode_entities'  =>  $_POST['exclude_encode_entities'],
        'enable_encoding'          =>  $_POST['enable_encoding'],
        'exclude_block_entities'  =>  $_POST['exclude_block_entities'],
        'enable_blocking'          =>  $_POST['enable_blocking'],
      );
      update_option( 'prevent_xss_vulnerability_reflected_settings', serialize( $reflected_xss ) );
    }
    $get_reflected_xss = unserialize( get_option(
      'prevent_xss_vulnerability_reflected_settings'
    ) );
    $exclude_encode_entities_values = '';
    $enable_encoding = '';
    $exclude_encode_entities_values = '';
    $enable_blocking = '';

    if ( isset( $get_reflected_xss['exclude_encode_entities'] )
      && ! empty( $get_reflected_xss['exclude_encode_entities'] ) ) {
      $exclude_encode_entities_values = $get_reflected_xss['exclude_encode_entities'];
    }
    if ( isset( $get_reflected_xss['enable_encoding'] )
      && $get_reflected_xss['enable_encoding'] == 1 ) {
      $enable_encoding = 'checked';
    }

    if ( isset( $get_reflected_xss['exclude_block_entities'] )
      && ! empty( $get_reflected_xss['exclude_block_entities'] ) ) {
      $exclude_block_entities_values = $get_reflected_xss['exclude_block_entities'];
    }
    if ( isset( $get_reflected_xss['enable_blocking'] )
      && $get_reflected_xss['enable_blocking'] == 1 ) {
      $enable_blocking = 'checked';
    }
    $plugin_url = plugins_url( '/admin', PREVENT_XSS_VULNERABILITY_FILE );
    wp_enqueue_style( 'style', $plugin_url . '/css/admin-style.min.css' );

    echo '<div class="wrap">';
    echo '<h2>Reflected Cross-site scripting(XSS) Settings</h2>';
    echo '<div>
              <p>Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. To know more, please visit <a href="/wp-admin/admin.php?page=prevent-xss-vulnerability-about" title="About XSS">About XSS</a> Page.</p>
          </div>';
    echo '<table class="important">
              <tr>
                  <td class="icon"><i class="fa icon icon-important" title="important">&nbsp;</i></td>
                  <td>
                      <p>After Configuring the Settings Please check the pages randomly to verify that your site is working properly.</p>

                      <p>If you are running <strong>WooCommerce</strong> Site so, please go through with all the steps of the Product Purchase (Cart, Checkout etc) to make sure that your Products can be purchased without having any diffuclty to customers.</p>
                  </td>
              </tr>
          </table>';
    echo '<form enctype="multipart/form-data" action="" method="POST" id="reflected-xss">';
    ?>

    <table class="prevent-xss reflected-xss">
        <caption>Encode Entities</caption>
        <tbody>
            <tr>
                <td>
                    <p>This Plugin <strong>Encodes</strong> the following <strong>Entities</strong> in the URL: </p>
                    <ol class="reflected-xss-items">
                        <li>Exclamation Mark <code>!</code></li>
                        <li>Double Quotation <code>"</code></li>
                        <li>Single Quotation <code>'</code></li>
                        <li>Opening Round Bracket <code>(</code></li>
                        <li>Closing Round Bracket <code>)</code></li>
                        <li>Asterik Sign <code>*</code></li>
                        <li>Less than Sign <code>&lt;</code></li>
                        <li>Greater than Sign <code>&gt;</code></li>
                        <li>Hyphen <code>`</code></li>
                        <li>Cap Sign <code>^</code></li>
                        <li>Opening Square Bracket <code>[</code></li>
                        <li>Closing Square Bracket <code>]</code></li>
                        <li>Opening Curly Bracket <code>{</code></li>
                        <li>Mod Sign <code>|</code></li>
                        <li>Closing Curly Bracket <code>}</code></li>
                    </ol>
                </td>
            </tr>
            <tr>
                <td>
                    <strong><label for="exclude_encoding_entities">Exclude Entites from Encoding :</label></strong>
                    <textarea name="exclude_encode_entities" placeholder="Add Entities in Comma Separated Form" rows="5" cols="100"><?php echo $exclude_encode_entities_values; ?></textarea>
                    <small>Add Entities in Comma Separated Form which you do not want to be encoded in the URL. Like: <code>[</code>,<code>{</code>,<code>]</code></small>
                </td>
            </tr>
            <tr>
                <td class="enable"><input type="checkbox" name="enable_encoding" value=1 <?php echo $enable_encoding; ?> /><strong>Enable Encoding</strong></td>
            </tr>
        </tbody>
    </table>

    <table class="prevent-xss reflected-xss">
            <caption>Block Entities (Remove Entities)</caption>
            <tbody>
                <tr>
                    <td>
                        <p>This Plugin <strong>Block/Remove</strong> the following <strong>Entities</strong> in the URL: </p>
                        <ol class="reflected-xss-items">
                            <li>Opening Round Bracket <code>(</code></li>
                            <li>Closing Round Bracket <code>)</code></li>
                            <li>Less than Sign <code>&lt;</code></li>
                            <li>Greater than Sign <code>&gt;</code></li>
                            <li>Opening Square Bracket <code>[</code></li>
                            <li>Closing Square Bracket <code>]</code></li>
                            <li>Opening Curly Bracket <code>{</code></li>
                            <li>Mod Sign <code>|</code></li>
                            <li>Closing Curly Bracket <code>}</code></li>
                        </ol>
                    </td>
                </tr>
                <tr>
                    <td>
                        <strong><label for="exclude_block_entities">Exclude Entites from Blocking :</label></strong>
                        <textarea name="exclude_block_entities" placeholder="Add Entities in Comma Separated Form" rows="5" cols="100"><?php echo $exclude_block_entities_values; ?></textarea>
                        <small>Add Entities in Comma Separated Form which you do not want to be blocked/remove in the URL. Like: <code>[</code>,<code>{</code>,<code>]</code></small>
                    </td>
                </tr>
                <tr>
                    <td class="enable"><input type="checkbox" name="enable_blocking" value=1 <?php echo $enable_blocking; ?> /><strong>Enable Blocking</strong></td>
                </tr>
            </tbody>
        </table>

    <?php
    submit_button();
    echo '</form>';
    echo '</div>';
  }
}
