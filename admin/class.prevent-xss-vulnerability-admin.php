<?php

/**
 * @package PreventXSSVulnerability\Admin
 */

class Prevent_XSS_Vulnerability_Admin {

	/**
	 * Initializes WordPress hooks
	 */
	function __construct() {
		add_action( 'admin_menu', array( $this, 'prevent_xss_vulnerability_menu' ) );
	}

	/**
	 * Add Settings Page in Menu
	 */
	function prevent_xss_vulnerability_menu() {
		add_menu_page( 'Prevent XSS Vulnerability', 'Prevent XSS Vulnerability', 'administrator', 'prevent-xss-vulnerability', array( $this, 'prevent_xss_vulnerability_settings' ), 'dashicons-shield' );
		add_submenu_page( 'prevent-xss-vulnerability', 'Prevent XSS Vulnerability', 'Prevent XSS', 'administrator', 'prevent-xss-vulnerability', array( $this, 'prevent_xss_vulnerability_settings' ) );
		add_submenu_page( 'prevent-xss-vulnerability', 'Reflected Cross-site scripting Settings', 'Reflected XSS Settings', 'administrator', 'prevent-reflected-xss-vulnerability-settings', array( $this, 'prevent_xss_vulnerability_reflected_settings_page' ) );
		add_submenu_page( 'prevent-xss-vulnerability', 'About Cross-site scripting', 'About XSS', 'administrator', 'prevent-xss-vulnerability-about', array( $this, 'prevent_xss_vulnerability_about' ) );		
	}

	/**
	 * Define what the Plugin can do and how to configure the settings
	 */
	public function prevent_xss_vulnerability_settings() {
		wp_enqueue_style( 'style', plugins_url('../css/admin-style.min.css', __FILE__) );
		$html  = '<div class="wrap">';
		$html .= '<h2>Cross-site scripting</h2>';
		$html .= '<div>		
									<p>This Plugin allows you to Prevent XSS Vulnerability. There are multiple kind vulnerabilites as defined on the <a href="/wp-admin/admin.php?page=prevent-xss-vulnerability-about" title="About XSS">About XSS</a> Page.</p>

									<p>At this moment, this plugin only allows you to Prevent <code>Reflected XSS</code>. Other kind of XSS would be provided in the later version of Plugin.</p>

									<p>Please make sure to Check the <a href="/wp-admin/admin.php?page=prevent-reflected-xss-vulnerability-settings" title="Reflected XSS">Reflected XSS</a> Settings Page to allow it work.</p>
							</div>';
		$html .= '<table class="important">
									<tr>
											<td class="icon"><i class="fa icon icon-important" title="important">&nbsp;</i></td>	
											<td>
													<p>After Configuring the Settings Please check the pages randomly to verify that your site is working properly.</p>
													
													<p>If you are running <strong>WooCommerce</strong> Site so, please go through with all the steps of the Product Purchase (Cart, Checkout etc) to make sure that your Products can be purchased without having any diffuclty to customers.</p>		
											</td>
									</tr>
							</table>';
		$html .= '</div>';

		echo $html;
	}

	/**
	 * Settings Page where user can change the Settings
	 * for XSS (Choose which params to encode and which to block)
	 */
	public function prevent_xss_vulnerability_reflected_settings_page() {
		if ( ! current_user_can( 'administrator' ) )  {
			wp_die( __( 'You do not have sufficient permissions to access this page.' ) );
		}
		if ( isset( $_POST['submit'] ) ) {
			$reflected_xss =  array(
				'exclude_encode_entities'	=>	$_POST['exclude_encode_entities'],
				'enable_encoding'					=>	$_POST['enable_encoding'],
				'exclude_block_entities'	=>	$_POST['exclude_block_entities'],
				'enable_blocking'					=>	$_POST['enable_blocking'],
			);
			update_option( 'prevent_xss_vulnerability_reflected_settings', serialize( $reflected_xss ) );
		}
		$get_reflected_xss = unserialize( get_option(
			'prevent_xss_vulnerability_reflected_settings'
		) );
		$exclude_encode_entities_values = '';
		$enable_encoding = '';
		$exclude_encode_entities_values = '';		
		$enable_blocking = '';

		if ( isset( $get_reflected_xss['exclude_encode_entities'] )
			&& ! empty( $get_reflected_xss['exclude_encode_entities'] ) ) {
			$exclude_encode_entities_values = $get_reflected_xss['exclude_encode_entities'];
		}
		if ( isset( $get_reflected_xss['enable_encoding'] )
			&& $get_reflected_xss['enable_encoding'] == 1 ) {
			$enable_encoding = 'checked';
		}

		if ( isset( $get_reflected_xss['exclude_block_entities'] )
			&& ! empty( $get_reflected_xss['exclude_block_entities'] ) ) {
			$exclude_block_entities_values = $get_reflected_xss['exclude_block_entities'];
		}
		if ( isset( $get_reflected_xss['enable_blocking'] )
			&& $get_reflected_xss['enable_blocking'] == 1 ) {
			$enable_blocking = 'checked';
		}
		wp_enqueue_style( 'style', plugins_url( '../css/admin-style.min.css', __FILE__ ) );

		echo '<div class="wrap">';
		echo '<h2>Reflected Cross-site scripting(XSS) Settings</h2>';
		echo '<div>
							<p>Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. To know more, please visit <a href="/wp-admin/admin.php?page=prevent-xss-vulnerability-about" title="About XSS">About XSS</a> Page.</p>
					</div>';
		echo '<table class="important">
							<tr>
									<td class="icon"><i class="fa icon icon-important" title="important">&nbsp;</i></td>	
									<td>
											<p>After Configuring the Settings Please check the pages randomly to verify that your site is working properly.</p>
											
											<p>If you are running <strong>WooCommerce</strong> Site so, please go through with all the steps of the Product Purchase (Cart, Checkout etc) to make sure that your Products can be purchased without having any diffuclty to customers.</p>		
									</td>
							</tr>
					</table>';
		echo '<form enctype="multipart/form-data" action="" method="POST" id="reflected-xss">';
		?>
	 
		<table class="prevent-xss reflected-xss">
				<caption>Encode Entities</caption>
				<tbody>
						<tr>
								<td>
										<p>This Plugin <strong>Encodes</strong> the following <strong>Entities</strong> in the URL: </p>
										<ol class="reflected-xss-items">
												<li>Exclamation Mark <code>!</code></li>
												<li>Double Quotation <code>"</code></li>
												<li>Single Quotation <code>'</code></li>
												<li>Opening Round Bracket <code>(</code></li>
												<li>Closing Round Bracket <code>)</code></li>
												<li>Asterik Sign <code>*</code></li>
												<li>Less than Sign <code>&lt;</code></li>
												<li>Greater than Sign <code>&gt;</code></li>
												<li>Hyphen <code>`</code></li>
												<li>Cap Sign <code>^</code></li>
												<li>Opening Square Bracket <code>[</code></li>
												<li>Closing Square Bracket <code>]</code></li>
												<li>Opening Curly Bracket <code>{</code></li>
												<li>Mod Sign <code>|</code></li>
												<li>Closing Curly Bracket <code>}</code></li>
										</ol>
								</td>
						</tr>
						<tr>
								<td>
										<strong><label for="exclude_encoding_entities">Exclude Entites from Encoding :</label></strong>
										<textarea name="exclude_encode_entities" placeholder="Add Entities in Comma Separated Form" rows="5" cols="100"><?php echo $exclude_encode_entities_values; ?></textarea>
										<small>Add Entities in Comma Separated Form which you do not want to be encoded in the URL. Like: <code>[</code>,<code>{</code>,<code>]</code></small>
								</td>
						</tr>
						<tr>
								<td class="enable"><input type="checkbox" name="enable_encoding" value=1 <?php echo $enable_encoding; ?> /><strong>Enable Encoding</strong></td>
						</tr>						
				</tbody>
		</table>

		<table class="prevent-xss reflected-xss">
						<caption>Block Entities (Remove Entities)</caption>
						<tbody>
								<tr>
										<td>
												<p>This Plugin <strong>Block/Remove</strong> the following <strong>Entities</strong> in the URL: </p>
												<ol class="reflected-xss-items">
														<li>Opening Round Bracket <code>(</code></li>
														<li>Closing Round Bracket <code>)</code></li>
														<li>Less than Sign <code>&lt;</code></li>
														<li>Greater than Sign <code>&gt;</code></li>
														<li>Opening Square Bracket <code>[</code></li>
														<li>Closing Square Bracket <code>]</code></li>
														<li>Opening Curly Bracket <code>{</code></li>
														<li>Mod Sign <code>|</code></li>
														<li>Closing Curly Bracket <code>}</code></li>
												</ol>
										</td>
								</tr>
								<tr>
										<td>
												<strong><label for="exclude_block_entities">Exclude Entites from Blocking :</label></strong>
												<textarea name="exclude_block_entities" placeholder="Add Entities in Comma Separated Form" rows="5" cols="100"><?php echo $exclude_block_entities_values; ?></textarea>
												<small>Add Entities in Comma Separated Form which you do not want to be blocked/remove in the URL. Like: <code>[</code>,<code>{</code>,<code>]</code></small>
										</td>
								</tr>
								<tr>
										<td class="enable"><input type="checkbox" name="enable_blocking" value=1 <?php echo $enable_blocking; ?> /><strong>Enable Blocking</strong></td>
								</tr>						
						</tbody>
				</table>

		<?php
		submit_button(); 
		echo '</form>';
		echo '</div>';
	}

	/**
	 * Define what is XSS and types of XSS
	 */
	public function prevent_xss_vulnerability_about() {
		$html  = '<div class="wrap">';
		$html .= '<h2>About Cross-site scripting</h2>';
		$html .= '<div>
									<p>Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy.</p>

									<p>Cross-site scripting carried out on websites accounted for roughly <strong>84%</strong> of all security vulnerabilities documented by Symantec as of <em>2007</em>. <strong>Bug bounty company HackerOne</strong> in <em>2017</em> reported that XSS is still a major threat vector. XSS effects vary in range from petty nuisance to significant security risk, depending on the sensitivity of the data handled by the vulnerable site and the nature of any security mitigation implemented by the site\'s owner.</p>
							</div>';

		$html .= '<h3 id="reflected-cross-site-scripting">Reflected Cross-site Scripting</h3>
							<div>
									<p>The non-persistent (or reflected) cross-site scripting vulnerability is by far the most basic type of web vulnerability. These holes show up when the data provided by a web client, most commonly in HTTP query parameters (e.g. HTML form submission), is used immediately by server-side scripts to parse and display a page of results for and to that user, without properly sanitizing the request.</p>

									<p>A reflected attack is typically delivered via email or a neutral web site. The bait is an innocent-looking URL, pointing to a trusted site but containing the XSS vector. If the trusted site is vulnerable to the vector, clicking the link can cause the victim\'s browser to execute the injected script.</p>
							</div>';

		$html .= '<h3 id="persistent-cross-site-scripting">Persistent Cross-site Scripting</h3>
							<div>
									<p>The persistent (or stored) XSS vulnerability is a more devastating variant of a cross-site scripting flaw: it occurs when the data provided by the attacker is saved by the server, and then permanently displayed on "normal" pages returned to other users in the course of regular browsing, without proper HTML escaping. A classic example of this is with online message boards where users are allowed to post HTML formatted messages for other users to read.</p>
							</div>';

		$html .= '<h3 id="mutated-cross-site-scripting">Mutated Cross-site Scripting</h3>
							<div>
									<p>Mutated XSS happens, when the attacker injects something that is seemingly safe, but rewritten and modified by the browser, while parsing the markup. This makes it extremely hard to detect or sanitize within the websites application logic. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters on parameters to CSS font-family.</p>
							</div>';
		$html .= '</div>';

		echo $html;
	}
}
